<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qinjee.masterdata.dao.auth.RoleAuthDao">

    <resultMap id="RoleGroupResultMap" type="com.qinjee.masterdata.model.vo.auth.RoleGroupVO">
        <id column="role_group_id" jdbcType="INTEGER" property="roleGroupId" />
        <result column="role_group_name" jdbcType="VARCHAR" property="roleGroupName" />
        <result column="parent_role_group_id" jdbcType="INTEGER" property="parentRoleGroupId" />
        <result column="role_type" jdbcType="VARCHAR" property="roleType" />
    </resultMap>

    <resultMap id="MenuResultMap" type="com.qinjee.masterdata.model.vo.auth.MenuVO">
        <id column="menu_id" jdbcType="INTEGER" property="menuId" />
        <result column="menu_name" jdbcType="VARCHAR" property="menuName" />
        <result column="icon_url" jdbcType="VARCHAR" property="iconUrl" />
        <result column="func_type" jdbcType="VARCHAR" property="funcType" />
        <result column="func_url" jdbcType="VARCHAR" property="funcUrl" />
        <result column="parent_menu_id" jdbcType="INTEGER" property="parentMenuId" />
        <result column="has_menu" jdbcType="INTEGER" property="hasMenu" />
    </resultMap>

    <resultMap id="OrgResultMap" type="com.qinjee.masterdata.model.vo.auth.OrganizationVO">
        <id column="org_id" jdbcType="INTEGER" property="orgId" />
        <result column="org_code" jdbcType="VARCHAR" property="orgCode" />
        <result column="org_name" jdbcType="VARCHAR" property="orgName" />
        <result column="org_type" jdbcType="VARCHAR" property="orgType" />
        <result column="org_parent_id" jdbcType="INTEGER" property="orgParentId" />
        <result column="org_full_name" jdbcType="VARCHAR" property="orgFullName" />
        <result column="has_org" jdbcType="INTEGER" property="hasOrg" />
    </resultMap>

    <resultMap id="CustomArchiveTableFieldResultMap" type="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO">
        <result column="role_id" jdbcType="INTEGER" property="roleId" />
        <result column="table_id" jdbcType="INTEGER" property="tableId" />
        <result column="table_code" jdbcType="VARCHAR" property="tableCode" />
        <result column="table_name" jdbcType="VARCHAR" property="tableName" />
        <result column="func_code" jdbcType="VARCHAR" property="funcCode" />
        <result column="field_id" jdbcType="INTEGER" property="fieldId" />
        <result column="field_code" jdbcType="VARCHAR" property="fieldCode" />
        <result column="field_name" jdbcType="VARCHAR" property="fieldName" />
        <result column="read_write_code" jdbcType="VARCHAR" property="readWriteCode" />
    </resultMap>

    <!--根据企业ID查询角色列表 -->
    <select id="searchRoleTree" parameterType="java.lang.Integer" resultMap="RoleGroupResultMap">
        select t_role_group.role_group_id,t_role_group.role_group_name,t_role_group.parent_role_group_id,'ROLE_GROUP' as role_type
        from t_role_group where t_role_group.company_id = #{companyId,jdbcType=INTEGER} and is_delete = 0
        UNION ALL
        select t_role.role_id role_group_id,t_role.role_name role_group_name,t_role.role_group_id parent_role_group_id,'ROLE' as role_type
        from t_role where t_role.company_id = #{companyId,jdbcType=INTEGER} and is_delete = 0
    </select>

    <!--根据角色ID和企业ID查询角色菜单树 -->
    <select id="searchRoleAuthTree" parameterType="com.qinjee.masterdata.model.vo.auth.RequestRoleVO" resultMap="MenuResultMap">
        select v.menu_id,v.menu_name,v.icon_url,v.func_type,v.func_url,v.parent_menu_id,
        CASE WHEN t.menu_id is not NULL THEN 1 ELSE 0 END has_menu
        from (
            select t_menu.menu_id,t_company_menu.menu_name,t_company_menu.icon_url,t_menu.func_type,t_menu.func_url,t_menu.parent_menu_id
            from t_menu,t_company_menu,t_role_menu_auth,t_role,t_user_role
            where t_user_role.archive_id = #{operatorId,jdbcType=INTEGER}
            and (t_user_role.is_trusteeship = 0
            or (t_user_role.is_trusteeship = 1
            and #{currentDateTime,jdbcType=TIMESTAMP} >= t_user_role.trusteeship_begin_time
            and t_user_role.trusteeship_end_time >= #{currentDateTime,jdbcType=TIMESTAMP}
            ))
            and t_company_menu.company_id = #{companyId,jdbcType=INTEGER}
            and t_user_role.role_id = t_role.role_id
            and t_role.role_id = t_role_menu_auth.role_id
            and t_role_menu_auth.menu_id = t_menu.menu_id
            and t_company_menu.menu_id = t_role_menu_auth.menu_id
            and t_user_role.is_delete = 0
            and t_role.is_delete = 0
            and t_role_menu_auth.is_delete = 0
            and t_menu.is_delete = 0
            and t_company_menu.is_delete = 0
            GROUP BY t_menu.menu_id,t_company_menu.menu_name,t_company_menu.icon_url,t_menu.func_type,t_menu.func_url,t_menu.parent_menu_id
            ) v
        LEFT JOIN (
        select t_role_menu_auth.menu_id from t_role,t_role_menu_auth
        where t_role.role_id = #{roleId,jdbcType=INTEGER}
        and t_role_menu_auth.role_id = t_role.role_id
        and t_role.is_delete = 0
        and t_role_menu_auth.is_delete = 0) t
        ON v.menu_id = t.menu_id
      </select>

    <!--根据角色ID和企业ID查询角色机构树 -->
    <select id="searchOrgAuthTree" parameterType="com.qinjee.masterdata.model.vo.auth.RequestRoleVO" resultMap="OrgResultMap">
        SELECT v.org_id,v.org_code,v.org_name,v.org_type,v.org_parent_id,v.org_full_name,
        CASE WHEN t.org_id is not NULL THEN 1 ELSE 0 END has_org from (
        select v1.org_id,v1.org_code,v1.org_name,v1.org_type,v1.org_parent_id,v1.org_full_name
        from (
                select t_organization.org_id,t_organization.org_code,t_organization.org_name,t_organization.org_type,
                t_organization.org_parent_id,t_organization.org_full_name
                from t_role_org_auth,t_role,t_user_role,t_organization
                where t_user_role.archive_id = #{operatorId,jdbcType=INTEGER}
                and (t_user_role.is_trusteeship = 0
                or (t_user_role.is_trusteeship = 1
                and #{currentDateTime,jdbcType=TIMESTAMP} >= t_user_role.trusteeship_begin_time
                and t_user_role.trusteeship_end_time >= #{currentDateTime,jdbcType=TIMESTAMP}
                ))
                and t_user_role.role_id = t_role.role_id
                and t_role.role_id = t_role_org_auth.role_id
                and t_role_org_auth.org_id = t_organization.org_id
                and t_role.is_delete = 0
                and t_role_org_auth.is_delete = 0
                and t_organization.is_enable = 1
        UNION
        select t_organization.org_id,t_organization.org_code,t_organization.org_name,t_organization.org_type,
                t_organization.org_parent_id,t_organization.org_full_name
                from t_user_org_auth,t_organization
                where t_user_org_auth.archive_id = #{operatorId,jdbcType=INTEGER}
                and (t_user_org_auth.is_trusteeship = 0
                or (t_user_org_auth.is_trusteeship = 1
                and #{currentDateTime,jdbcType=TIMESTAMP} >= t_user_org_auth.trusteeship_begin_time
                and t_user_org_auth.trusteeship_end_time >= #{currentDateTime,jdbcType=TIMESTAMP}
                ))
                and t_user_org_auth.org_id = t_organization.org_id
                and t_user_org_auth.is_delete = 0
                and t_organization.is_enable = 1
        ) v1
        GROUP BY v1.org_id,v1.org_code,v1.org_name,v1.org_type,v1.org_parent_id,v1.org_full_name
        ) v
        LEFT JOIN (
        select t_role_org_auth.org_id from t_role_org_auth,t_role
        where t_role.role_id = #{roleId,jdbcType=INTEGER}
        and t_role_org_auth.role_id = t_role.role_id
        and t_role.is_delete = 0
        and t_role_org_auth.is_delete = 0
        <if test="archiveId != null">
        UNION
        SELECT t_user_org_auth.org_id
        FROM t_user_org_auth
        WHERE t_user_org_auth.role_id = #{roleId,jdbcType=INTEGER}
        AND archive_id = #{archiveId,jdbcType=INTEGER}
        AND is_delete = 0
        </if>
        ) t ON v.org_id = t.org_id
      </select>

    <!-- 新增角色组 -->
    <insert id="addRoleGroup" keyColumn="role_group_id" keyProperty="roleGroupId" parameterType="com.qinjee.masterdata.model.entity.RoleGroup" useGeneratedKeys="true">
    insert into t_role_group (role_group_name, company_id, operator_id)
    values (#{roleGroupName,jdbcType=VARCHAR},#{companyId,jdbcType=INTEGER},#{operatorId,jdbcType=INTEGER})
    </insert>

    <!-- 新增角色 -->
    <insert id="addRole" keyColumn="role_id" keyProperty="roleId" parameterType="com.qinjee.masterdata.model.entity.Role" useGeneratedKeys="true">
    insert into t_role (role_name, role_group_id, company_id, operator_id)
    values (#{roleName,jdbcType=VARCHAR}, #{roleGroupId,jdbcType=INTEGER}, #{companyId,jdbcType=INTEGER}, #{operatorId,jdbcType=INTEGER})
    </insert>

    <!--根据角色ID查询角色详情 -->
    <select id="searchRoleDetailByRoleId" parameterType="java.lang.Integer" resultType="com.qinjee.masterdata.model.entity.Role">
        select role_id as roleId,role_name as roleName,role_group_id as roleGroupId,is_auto_auth_child_org as isAutoAuthChildOrg,company_id as companyId,is_system_define as isSystemDefine,operator_id as operatorId,create_time as createTime,update_time as updateTime
        from t_role where role_id = #{roleId,jdbcType=INTEGER} and is_delete = 0
    </select>

    <!-- 根据角色ID修改角色是否自动授权新增子集机构权限 -->
    <update id="updateRoleAutoAuthChildOrgByRoleId" parameterType="com.qinjee.masterdata.model.entity.Role">
        update t_role set is_auto_auth_child_org = #{isAutoAuthChildOrg,jdbcType=INTEGER},operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!-- 修改角色 -->
    <update id="updateRole" parameterType="com.qinjee.masterdata.model.entity.Role">
        update t_role set role_name = #{roleName,jdbcType=VARCHAR},role_group_id = #{roleGroupId,jdbcType=INTEGER},operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!-- 修改角色组 -->
    <update id="updateRoleGroup" parameterType="com.qinjee.masterdata.model.entity.RoleGroup">
        update t_role_group set role_group_name = #{roleGroupName,jdbcType=VARCHAR},operator_id = #{operatorId,jdbcType=INTEGER}
        where role_group_id = #{roleGroupId,jdbcType=INTEGER} and is_delete = 0
    </update>

  <!-- 删除角色 -->
    <update id="delRole" parameterType="com.qinjee.masterdata.model.entity.Role">
        update t_role set is_delete = 1,operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!-- 删除角色组 -->
    <update id="delRoleGroup" parameterType="com.qinjee.masterdata.model.entity.RoleGroup">
        update t_role_group set is_delete = 1,operator_id = #{operatorId,jdbcType=INTEGER}
        where role_group_id = #{roleGroupId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!--根据角色ID查询菜单列表 -->
    <select id="searchRoleMenuListByRoleId" parameterType="java.lang.Integer" resultMap="MenuResultMap">
        select t_role_menu_auth.menu_id from t_role,t_role_menu_auth
        where t_role.role_id = #{roleId,jdbcType=INTEGER} and t_role_menu_auth.role_id = t_role.role_id and t_role.is_delete = 0 and t_role_menu_auth.is_delete = 0
    </select>

    <!-- 新增角色功能权限 -->
    <insert id="addRoleMenuAuth" keyColumn="id" keyProperty="id" parameterType="com.qinjee.masterdata.model.entity.RoleMenuAuth" useGeneratedKeys="true">
        insert into t_role_menu_auth (role_id, menu_id, operator_id)
        values (#{roleId,jdbcType=INTEGER}, #{menuId,jdbcType=INTEGER},#{operatorId,jdbcType=INTEGER})
    </insert>

    <!-- 删除角色功能权限 -->
    <update id="delRoleMenuAuth" parameterType="com.qinjee.masterdata.model.entity.RoleMenuAuth">
        update t_role_menu_auth set is_delete = 1,operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER} and menu_id = #{menuId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!--根据角色ID查询机构列表 -->
    <select id="searchRoleOrgListByRoleId" parameterType="java.lang.Integer" resultMap="OrgResultMap">
        select t_role_org_auth.org_id from t_role_org_auth,t_role
        where t_role.role_id = #{roleId,jdbcType=INTEGER}
        and t_role_org_auth.role_id = t_role.role_id
        and t_role.is_delete = 0
        and t_role_org_auth.is_delete = 0
    </select>

    <!-- 新增角色机构权限 -->
    <insert id="addRoleOrgAuth" keyColumn="auth_id" keyProperty="authId" parameterType="com.qinjee.masterdata.model.entity.RoleOrgAuth" useGeneratedKeys="true">
        insert into t_role_org_auth (role_id, org_id, operator_id)
        values (#{roleId,jdbcType=INTEGER}, #{orgId,jdbcType=INTEGER},#{operatorId,jdbcType=INTEGER})
    </insert>

    <!-- 删除角色机构权限 -->
    <update id="delRoleOrgAuth" parameterType="com.qinjee.masterdata.model.entity.RoleOrgAuth">
        update t_role_org_auth set is_delete = 1,operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER} and org_id = #{orgId,jdbcType=INTEGER} and is_delete = 0
    </update>

    <!--根据企业ID查询自定义表列表 -->
    <select id="searchCustomArchiveTableListByCompanyId" parameterType="java.lang.Integer" resultMap="CustomArchiveTableFieldResultMap">
        select t.table_id,t.table_code,t.table_name,t.func_code from t_custom_archive_table t
        where t.company_id = #{companyId,jdbcType=INTEGER}
        and t.func_code = 'ARC'
        and t.is_delete = 0
        and t.is_enable = 1
        ORDER BY t.sort asc
    </select>

    <!--根据角色和自定义表ID查询自定义字段列表 -->
    <select id="searchCustomArchiveTableFieldListByTableId" parameterType="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO" resultMap="CustomArchiveTableFieldResultMap">
        select t.table_id,t.table_code,t.table_name,t.func_code,f.field_id,f.field_code,f.field_name,
        CASE WHEN v.read_write_code is NOT NULL THEN v.read_write_code ELSE '' end read_write_code
        from t_custom_archive_table t,t_custom_archive_field f
        LEFT JOIN (
        select f.field_id,a.read_write_code from t_role_custom_field_auth a,t_custom_archive_field f
        where a.role_id = #{roleId,jdbcType=INTEGER}
        and a.field_id = f.field_id
        and a.is_delete = 0
        and f.is_delete = 0
        ) v ON f.field_id = v.field_id
        where t.table_id = #{tableId,jdbcType=INTEGER}
        and t.is_delete = 0
        and f.is_delete = 0
    </select>

    <!--根据角色和自定义表ID查询自定义字段列表 -->
    <select id="searchCustomArchiveTableFieldListByRoleId" parameterType="java.lang.Integer" resultMap="CustomArchiveTableFieldResultMap">
        select a.role_id,t.table_id,t.table_code,t.table_name,f.field_id,f.field_code,f.field_name,a.read_write_code
        from t_role_custom_field_auth a,t_custom_archive_field f,t_custom_archive_table t
        where a.role_id = #{roleId,jdbcType=INTEGER}
        and a.field_id = f.field_id
        and f.table_id = t.table_id
        and a.is_delete = 0
        and f.is_delete = 0
        and t.is_delete = 0
    </select>

    <!--查询角色自定义人员表字段 -->
    <select id="searchRoleCustomArchiveTableFieldAuth" parameterType="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO" resultType="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO">
        select role_id,field_id,read_write_code,operator_id,is_delete
        from t_role_custom_field_auth
        where role_id = #{roleId,jdbcType=INTEGER}
        and field_id = #{fieldId,jdbcType=INTEGER}
    </select>

    <!-- 新增角色自定义人员表字段权限 -->
    <insert id="addRoleCustomArchiveTableFieldAuth" parameterType="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO">
        insert into t_role_custom_field_auth(role_id,field_id,read_write_code,operator_id,is_delete) values(
        #{roleId,jdbcType=INTEGER},#{fieldId,jdbcType=INTEGER},#{readWriteCode,jdbcType=VARCHAR},#{operatorId,jdbcType=INTEGER},0
        )
    </insert>

    <!-- 修改角色自定义人员表字段权限 -->
    <update id="updateRoleCustomArchiveTableFieldAuth" parameterType="com.qinjee.masterdata.model.vo.auth.CustomArchiveTableFieldVO">
        update t_role_custom_field_auth
        set
        <if test="readWriteCode != null">
            read_write_code=#{readWriteCode,jdbcType=VARCHAR},
        </if>
        is_delete = #{isDelete,jdbcType=INTEGER},
        operator_id = #{operatorId,jdbcType=INTEGER}
        where role_id = #{roleId,jdbcType=INTEGER}
        and field_id = #{fieldId,jdbcType=INTEGER}
        and is_delete = 0
    </update>

    <!-- 新增角色自定义人员表字段权限 -->
<!--    <insert id="saveRoleDataLevelAuth" keyColumn="id" keyProperty="id" parameterType="com.qinjee.masterdata.model.vo.auth.RoleDataLevelAuthVO" useGeneratedKeys="true">-->
<!--        insert into t_role_custom_field_auth(role_id,field_id,read_write_code,operator_id,is_delete) values(-->
<!--        #{roleId,jdbcType=INTEGER},#{fieldId,jdbcType=INTEGER},#{readWriteCode,jdbcType=VARCHAR},#{operatorId,jdbcType=INTEGER},0-->
<!--        )-->
<!--    </insert>-->
</mapper>
